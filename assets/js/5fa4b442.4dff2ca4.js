"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[242],{2229:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetPartyFromPlayer","desc":"Returns the party that the given player is in, if any.","params":[{"name":"Player","desc":"The player to search for.","lua_type":"Player"}],"returns":[{"desc":"The party object.","lua_type":"Party"}],"function_type":"static","errors":[{"lua_type":"\\"No Player\\"","desc":"Happens when the player isn\'t a valid player instance."}],"source":{"line":159,"path":"src/init.lua"}},{"name":"GetParties","desc":"Returns an array of all the parties.","params":[],"returns":[{"desc":"The party array.","lua_type":"{ Party }"}],"function_type":"static","source":{"line":174,"path":"src/init.lua"}},{"name":"GetPartyFromId","desc":"Returns the party with the provided Id.","params":[{"name":"Id","desc":"The id of the party to search for.","lua_type":"string"}],"returns":[{"desc":"The party.","lua_type":"Party"}],"function_type":"static","source":{"line":191,"path":"src/init.lua"}},{"name":"IsInParty","desc":"Returns a boolean indicating if the player is inside the party.","params":[{"name":"PartyTable","desc":"The party.","lua_type":"Party"},{"name":"Player","desc":"The Player that will be searched.","lua_type":"Player"}],"returns":[{"desc":"The boolean indicating if the player is in the party.","lua_type":"boolean"}],"function_type":"static","source":{"line":205,"path":"src/init.lua"}},{"name":"GetOwner","desc":"Returns the party\'s owner.","params":[{"name":"PartyTable","desc":"The party.","lua_type":"Party"}],"returns":[{"desc":"The owner of the party.","lua_type":"Player"}],"function_type":"static","source":{"line":218,"path":"src/init.lua"}},{"name":"IsOwner","desc":"Returns a boolean indicating if the given player is the owner.","params":[{"name":"PartyTable","desc":"The party.","lua_type":"Party"},{"name":"Player","desc":"The player to be checked.","lua_type":"Player"}],"returns":[{"desc":"The boolean indicating if the player is the owner of the party.","lua_type":"boolean"}],"function_type":"static","errors":[{"lua_type":"\\"No Player\\"","desc":"Happens when no valid player is provided."}],"source":{"line":232,"path":"src/init.lua"}},{"name":"new","desc":"Returns a party object.","params":[{"name":"Owner","desc":"The Player that will be the owner.","lua_type":"Player"},{"name":"PlaceId","desc":"The place that the players will teleport to.","lua_type":"number"},{"name":"Name","desc":"The name the party will have. If not provided, it will be the owner\'s name.","lua_type":"string?"},{"name":"MaxPlayers","desc":"The max amount of players that will be able to join. If not provided, defaults to 8.","lua_type":"number?"}],"returns":[{"desc":"A new Party.","lua_type":"Party"}],"function_type":"static","errors":[{"lua_type":"\\"Server Only\\"","desc":"Happens when this function is called on the client."}],"realm":["Server"],"source":{"line":252,"path":"src/init.lua"}}],"properties":[{"name":"PartyCreated","desc":"Fires whenever a party is created. Returns the party as a parameter.","lua_type":"RBXScriptSignal | Signal","source":{"line":88,"path":"src/init.lua"}},{"name":"PartyRemoved","desc":"Fires whenever a party is removed. Returns the party as a parameter.","lua_type":"RBXScriptSignal | Signal","source":{"line":94,"path":"src/init.lua"}},{"name":"ServerStarted","desc":"Fires whenever a party has started. Returns the party as a parameter.\\nThis should only fire on the server that the party has teleported to.\\n\\nAn example would be:\\n\\n```lua\\n-- In Server the player teleports to\\nlocal PartyModule = require(Path.PartyModule)\\n\\nPartyModule.ServerStarted:Connect(function(Party: Party)\\n\\tprint(Party.Data) -- prints the custom data\\n\\tprint(Party.OwnerId) -- prints the owner user id\\nend)\\n```\\n\\n:::note\\n\\tThe party will try to keep the player instances inside the Player array.\\n\\tIf A player does not join the game in the amount of time specified in PlayerJoinTime, it will be replaced by their UserId.\\n:::","lua_type":"RBXScriptSignal | Signal","source":{"line":118,"path":"src/init.lua"}},{"name":"PlayersLoaded","desc":"This is an event that fires after all the Player array inside the party has finished loading.\\nThis is usually useful if added inside the [PartyModule.ServerStarted] event.\\n\\n```lua\\n-- In Server the player teleports to\\nlocal PartyModule = require(Path.PartyModule)\\n\\nPartyModule.ServerStarted:Connect(function(Party: Party)\\n\\tPartyModule.PlayersLoaded:Connect(function(Players: { Player })\\n\\t\\tprint(Players) -- prints the array of players (or user id on failed players)\\n\\tend)\\n\\n\\tPartyModule.PlayersLoaded:Wait() -- waiting for all players to load\\nend)\\n```","lua_type":"RBXScriptSignal | Signal","source":{"line":138,"path":"src/init.lua"}},{"name":"CurrentParty","desc":"The party from the [PartyModule.ServerStarted] event.","lua_type":"Party","source":{"line":144,"path":"src/init.lua"}}],"types":[],"name":"PartyModule","desc":"This is the module itself, used to construct a party and find parties.","source":{"line":36,"path":"src/init.lua"}}')}}]);