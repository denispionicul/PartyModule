[{"title":"Party","type":0,"sectionRef":"#","url":"/PartyModule/api/Party","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#types","content":" "},{"title":"Party​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#Party","content":"&lt;/&gt; interface Party { Id: number-- The Id of the party. Name: string-- The Name of the party. Players: {Player }-- The players inside the party. OwnerId: number-- The Owner's User Id. PlaceId: number-- The place Id the players will teleport to. Data: {[any]: any}-- An empty table used to store info of your choice. MaxPlayers: number-- The max amount of players there can be inside. PlayerAdded: RBXScriptSignal | Signal-- Fires when a player has been added inside the party. Returns the player as the first parameter. PlayerRemoved: RBXScriptSignal | Signal-- Fires when a player has been removed inside the party. Returns the player as the first parameter. OwnerChanged: RBXScriptSignal | Signal-- Fires when the owner changes. Returns the new owner. }  "},{"title":"Functions​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#functions","content":" "},{"title":"tostring​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#tostring","content":"&lt;/&gt; Party:tostring() → string   "},{"title":"AddPlayer​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#AddPlayer","content":"This item only works when running on the server. Server &lt;/&gt; Party:AddPlayer( Player: Player -- The Player that will be added. ) → boolean-- A boolean indicating if the player has been successfully added. Adds the given player inside the party. "},{"title":"Errors","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party##","content":"Type\tDescription&quot;Server Only&quot;\tHappens when this method is called on the client. &quot;No Player&quot;\tHappens when no valid player is provided.  "},{"title":"RemovePlayer​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#RemovePlayer","content":"This item only works when running on the server. Server &lt;/&gt; Party:RemovePlayer( Player: Player -- The Player that will be removed. ) → boolean-- A boolean indicating if the player has been successfully removed. Removes the given player inside the party. "},{"title":"Errors","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party##","content":"Type\tDescription&quot;Server Only&quot;\tHappens when this method is called on the client. &quot;No Player&quot;\tHappens when no valid player is provided.  "},{"title":"Start​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#Start","content":"This item only works when running on the server. Server &lt;/&gt; Party:Start() → () Teleports all the players. Calls PartyModule.ServerStarted on the teleported server. "},{"title":"Errors","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party##","content":"Type\tDescription&quot;Server Only&quot;\tHappens when this method is called on the client.  "},{"title":"SetOwner​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#SetOwner","content":"This item only works when running on the server. Server &lt;/&gt; Party:SetOwner() → () Sets the given player as the party's owner. "},{"title":"Errors","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party##","content":"Type\tDescription&quot;Server Only&quot;\tHappens when this method is called on the client. &quot;No Player&quot;\tHappens when no valid player is provided.  "},{"title":"Destroy​","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party#Destroy","content":"This item only works when running on the server. Server &lt;/&gt; Party:Destroy() → () Destroys the party. "},{"title":"Errors","type":1,"pageTitle":"Party","url":"/PartyModule/api/Party##","content":"Type\tDescription&quot;Server Only&quot;\tHappens when this method is called on the client. "},{"title":"PartyModule","type":0,"sectionRef":"#","url":"/PartyModule/api/PartyModule","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#properties","content":" "},{"title":"PartyCreated​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#PartyCreated","content":"&lt;/&gt; PartyModule.PartyCreated: RBXScriptSignal | Signal Fires whenever a party is created. Returns the party as a parameter.  "},{"title":"PartyRemoved​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#PartyRemoved","content":"&lt;/&gt; PartyModule.PartyRemoved: RBXScriptSignal | Signal Fires whenever a party is removed. Returns the party as a parameter.  "},{"title":"ServerStarted​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#ServerStarted","content":"&lt;/&gt; PartyModule.ServerStarted: RBXScriptSignal | Signal Fires whenever a party has started. Returns the party as a parameter. This should only fire on the server that the party has teleported to. An example would be: -- In Server the player teleports to local PartyModule = require(Path.PartyModule) PartyModule.ServerStarted:Connect(function(Party: Party) print(Party.Data) -- prints the custom data print(Party.OwnerId) -- prints the owner user id end) note The party will try to keep the player instances inside the Player array. If A player does not join the game in the amount of time specified in PlayerJoinTime, it will be replaced by their UserId.   "},{"title":"PlayersLoaded​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#PlayersLoaded","content":"&lt;/&gt; PartyModule.PlayersLoaded: RBXScriptSignal | Signal This is an event that fires after all the Player array inside the party has finished loading. This is usually useful if added inside the PartyModule.ServerStarted event. -- In Server the player teleports to local PartyModule = require(Path.PartyModule) PartyModule.ServerStarted:Connect(function(Party: Party) PartyModule.PlayersLoaded:Connect(function(Players: { Player }) print(Players) -- prints the array of players (or user id on failed players) end) PartyModule.PlayersLoaded:Wait() -- waiting for all players to load end)   "},{"title":"CurrentParty​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#CurrentParty","content":"&lt;/&gt; PartyModule.CurrentParty: Party The party from the PartyModule.ServerStarted event. "},{"title":"Functions​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#functions","content":" "},{"title":"GetPartyFromPlayer​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#GetPartyFromPlayer","content":"&lt;/&gt; PartyModule.GetPartyFromPlayer( Player: Player -- The player to search for. ) → Party-- The party object. Returns the party that the given player is in, if any. "},{"title":"Errors","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule##","content":"Type\tDescription&quot;No Player&quot;\tHappens when the player isn't a valid player instance.  "},{"title":"GetParties​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#GetParties","content":"&lt;/&gt; PartyModule.GetParties() → {Party}-- The party array. Returns an array of all the parties.  "},{"title":"GetPartyFromId​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#GetPartyFromId","content":"&lt;/&gt; PartyModule.GetPartyFromId( Id: number-- The id of the party to search for. ) → Party-- The party. Returns the party with the provided Id.  "},{"title":"IsInParty​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#IsInParty","content":"&lt;/&gt; PartyModule.IsInParty( PartyTable: Party,-- The party. Player: Player -- The Player that will be searched. ) → boolean-- The boolean indicating if the player is in the party. Returns a boolean indicating if the player is inside the party.  "},{"title":"GetOwner​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#GetOwner","content":"&lt;/&gt; PartyModule.GetOwner( PartyTable: Party-- The party. ) → Player -- The owner of the party. Returns the party's owner.  "},{"title":"IsOwner​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#IsOwner","content":"&lt;/&gt; PartyModule.IsOwner( PartyTable: Party,-- The party. Player: Player -- The player to be checked. ) → boolean-- The boolean indicating if the player is the owner of the party. Returns a boolean indicating if the given player is the owner. "},{"title":"Errors","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule##","content":"Type\tDescription&quot;No Player&quot;\tHappens when no valid player is provided.  "},{"title":"new​","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule#new","content":"This item only works when running on the server. Server &lt;/&gt; PartyModule.new( Owner: Player ,-- The Player that will be the owner. PlaceId: number,-- The place that the players will teleport to. Name: string?,-- The name the party will have. If not provided, it will be the owner's name. MaxPlayers: number?-- The max amount of players that will be able to join. If not provided, defaults to 8. ) → Party-- A new Party. Returns a party object. "},{"title":"Errors","type":1,"pageTitle":"PartyModule","url":"/PartyModule/api/PartyModule##","content":"Type\tDescription&quot;Server Only&quot;\tHappens when this function is called on the client. "}]